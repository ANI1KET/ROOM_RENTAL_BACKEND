// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  OWNER
  BROKER
  USER
}

model User {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String        @unique
  image        String?
  number       String?       @unique
  password     String?
  // ENUM
  role         Role          @default(USER)
  // RELATIONSHIP
  rooms        Room[]        @relation("UserRooms")
  roomReviews  RoomReview[]  @relation("RoomReviews")
  // RELATIONSHIP
  store        Store[]       @relation("UserStores")
  storeReviews StoreReview[] @relation("StoreReviews")
  // 
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("Users")
}

enum RoomTypeEnum {
  FLAT
  ONE_BHK
  TWO_BHK
}

enum FurnishingStatusEnum {
  UNFURNISHED
  SEMIFURNISHED
  FURNISHED
}

enum Aminities {
  PARKING
  WIFI
}

model Room {
  id               String               @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  roomNumber       String
  city             String
  direction        String?
  location         String // Location of Room
  postedBy         Role                 @default(USER)
  photos           String[] // Array of photo URLs/paths
  videos           String? // video URLs/paths
  price            Float // Price of Room
  ratings          Float                @default(0)
  mincapacity      Int // Constraint to ensure valid capacity
  maxcapacity      Int // Maximum number of people allowed
  verified         Boolean?
  // ENUM
  roomtype         RoomTypeEnum
  furnishingStatus FurnishingStatusEnum
  amenities        Aminities[]          @default([])
  // RELATIONSHIP
  user             User                 @relation(fields: [userId], references: [id], name: "UserRooms")
  userId           String               @db.ObjectId
  // RELATIONSHIP
  roomReviews      RoomReview[]         @relation("RoomReviews")
  // 
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt

  @@index([userId])
  @@index([city, location])
  // 
  @@map("Rooms")
}

model RoomReview {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Float
  comment   String
  // RELATIONSHIP 
  room      Room     @relation(fields: [roomId], references: [id], name: "RoomReviews")
  roomId    String   @db.ObjectId
  // RELATIONSHIP 
  user      User     @relation(fields: [userId], references: [id], name: "RoomReviews")
  userId    String   @db.ObjectId
  // 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // @@index([userId])
  // @@index([roomForRentId])
  @@map("Room_Reviews")
}

enum StoreTypeEnum {
  CLOTHING
  FOOTWEAR
  JEWELRY
  COSMETICS
  GADGETS
  FURNITURE
  SPORTS
  GROCERY
  PHARMACY
  FITNESS
  SPA
  SALON
  PETS
  STATIONERY
  HARDWARE
  ELECTRONICS
  GARDENING
}

model Store {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  storeNumber  String          @unique
  description  String?
  city         String
  direction    String?
  location     String
  postedBy     Role            @default(USER)
  photos       String[]
  videos       String?
  ratings      Float           @default(0)
  verified     Boolean?
  // ENUM
  storeType    StoreTypeEnum[]
  // RELATIONSHIP
  user         User            @relation(fields: [userId], references: [id], name: "UserStores")
  userId       String          @db.ObjectId
  // RELATIONSHIP 
  storeReviews StoreReview[]   @relation("StoreReviews")
  // 
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@index([userId])
  @@map("Stores")
}

model StoreReview {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Float
  comment   String
  // RELATIONSHIP 
  user      User     @relation(fields: [userId], references: [id], name: "StoreReviews")
  userId    String   @db.ObjectId
  // RELATIONSHIP 
  store     Store    @relation(fields: [roomId], references: [id], name: "StoreReviews")
  roomId    String   @db.ObjectId
  // 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Store_Reviews")
}

model Hostel {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model Restaurant {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model Land {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model Repair {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model Rental {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}
